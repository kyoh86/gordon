// Code generated by MockGen. DO NOT EDIT.
// Source: internal/command/hub_gen.go

// Package command_test is a generated GoMock package.
package command_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v29/github"
	gogh "github.com/kyoh86/gogh/gogh"
	io "io"
	reflect "reflect"
)

// MockHubClient is a mock of HubClient interface
type MockHubClient struct {
	ctrl     *gomock.Controller
	recorder *MockHubClientMockRecorder
}

// MockHubClientMockRecorder is the mock recorder for MockHubClient
type MockHubClientMockRecorder struct {
	mock *MockHubClient
}

// NewMockHubClient creates a new mock instance
func NewMockHubClient(ctrl *gomock.Controller) *MockHubClient {
	mock := &MockHubClient{ctrl: ctrl}
	mock.recorder = &MockHubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHubClient) EXPECT() *MockHubClientMockRecorder {
	return m.recorder
}

// Asset mocks base method
func (m *MockHubClient) Asset(arg0 context.Context, arg1 *gogh.Repo, arg2 int64) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Asset", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Asset indicates an expected call of Asset
func (mr *MockHubClientMockRecorder) Asset(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Asset", reflect.TypeOf((*MockHubClient)(nil).Asset), arg0, arg1, arg2)
}

// LatestRelease mocks base method
func (m *MockHubClient) LatestRelease(arg0 context.Context, arg1 *gogh.Repo) (*github.RepositoryRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestRelease", arg0, arg1)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestRelease indicates an expected call of LatestRelease
func (mr *MockHubClientMockRecorder) LatestRelease(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestRelease", reflect.TypeOf((*MockHubClient)(nil).LatestRelease), arg0, arg1)
}

// Release mocks base method
func (m *MockHubClient) Release(arg0 context.Context, arg1 *gogh.Repo, arg2 string) (*github.RepositoryRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release
func (mr *MockHubClientMockRecorder) Release(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockHubClient)(nil).Release), arg0, arg1, arg2)
}
