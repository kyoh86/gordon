// Code generated by generate.go DO NOT EDIT.

package env

import (
	gostrcase "github.com/stoewer/go-strcase"
	"os"
)

type Envar struct {
	GithubHost   *GithubHost
	GithubUser   *GithubUser
	Architecture *Architecture
	OS           *OS
	Cache        *Cache
	Bin          *Bin
	Man          *Man
	Hooks        *Hooks
}

func getEnvar(prefix string) (envar Envar, err error) {
	prefix = gostrcase.UpperSnakeCase(prefix)
	{
		v := os.Getenv(prefix + "GITHUB_HOST")
		if v != "" {
			var value GithubHost
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return envar, err
			}
			envar.GithubHost = &value
		}
	}
	{
		v := os.Getenv(prefix + "GITHUB_USER")
		if v != "" {
			var value GithubUser
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return envar, err
			}
			envar.GithubUser = &value
		}
	}
	{
		v := os.Getenv(prefix + "ARCHITECTURE")
		if v != "" {
			var value Architecture
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return envar, err
			}
			envar.Architecture = &value
		}
	}
	{
		v := os.Getenv(prefix + "OS")
		if v != "" {
			var value OS
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return envar, err
			}
			envar.OS = &value
		}
	}
	{
		v := os.Getenv(prefix + "CACHE")
		if v != "" {
			var value Cache
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return envar, err
			}
			envar.Cache = &value
		}
	}
	{
		v := os.Getenv(prefix + "BIN")
		if v != "" {
			var value Bin
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return envar, err
			}
			envar.Bin = &value
		}
	}
	{
		v := os.Getenv(prefix + "MAN")
		if v != "" {
			var value Man
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return envar, err
			}
			envar.Man = &value
		}
	}
	{
		v := os.Getenv(prefix + "HOOKS")
		if v != "" {
			var value Hooks
			if err = value.UnmarshalText([]byte(v)); err != nil {
				return envar, err
			}
			envar.Hooks = &value
		}
	}
	return
}
